
//
// WARNING: This file was auto generated and should not be modified directly!
// Any changes here will be overwritten!
//

#include "setup_module_auto_defines.h"
#include <Python.h>
#include "ics/icsnVC40.h"

int setup_module_auto_defines(PyObject * module)
{
	int result = 0;

	result += PyModule_AddIntMacro(module, NEOVI_COMMTYPE_RS232);
	result += PyModule_AddIntMacro(module, NEOVI_COMMTYPE_USB_BULK);
	result += PyModule_AddIntMacro(module, NEOVI_COMMTYPE_TCPIP);
	result += PyModule_AddIntMacro(module, NEOVI_COMMTYPE_FIRE_USB);
	result += PyModule_AddIntMacro(module, NETID_DEVICE);
	result += PyModule_AddIntMacro(module, NETID_HSCAN);
	result += PyModule_AddIntMacro(module, NETID_MSCAN);
	result += PyModule_AddIntMacro(module, NETID_SWCAN);
	result += PyModule_AddIntMacro(module, NETID_LSFTCAN);
	result += PyModule_AddIntMacro(module, NETID_FORDSCP);
	result += PyModule_AddIntMacro(module, NETID_J1708);
	result += PyModule_AddIntMacro(module, NETID_AUX);
	result += PyModule_AddIntMacro(module, NETID_JVPW);
	result += PyModule_AddIntMacro(module, NETID_ISO);
	result += PyModule_AddIntMacro(module, NETID_ISOPIC);
	result += PyModule_AddIntMacro(module, NETID_MAIN51);
	result += PyModule_AddIntMacro(module, NETID_RED);
	result += PyModule_AddIntMacro(module, NETID_SCI);
	result += PyModule_AddIntMacro(module, NETID_ISO2);
	result += PyModule_AddIntMacro(module, NETID_ISO14230);
	result += PyModule_AddIntMacro(module, NETID_LIN);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET1);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET2);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET3);
	result += PyModule_AddIntMacro(module, NETID_ISO3);
	result += PyModule_AddIntMacro(module, NETID_HSCAN2);
	result += PyModule_AddIntMacro(module, NETID_HSCAN3);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET4);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET5);
	result += PyModule_AddIntMacro(module, NETID_ISO4);
	result += PyModule_AddIntMacro(module, NETID_LIN2);
	result += PyModule_AddIntMacro(module, NETID_LIN3);
	result += PyModule_AddIntMacro(module, NETID_LIN4);
	result += PyModule_AddIntMacro(module, NETID_MOST);
	result += PyModule_AddIntMacro(module, NETID_RED_APP_ERROR);
	result += PyModule_AddIntMacro(module, NETID_CGI);
	result += PyModule_AddIntMacro(module, NETID_3G_RESET_STATUS);
	result += PyModule_AddIntMacro(module, NETID_3G_FB_STATUS);
	result += PyModule_AddIntMacro(module, NETID_3G_APP_SIGNAL_STATUS);
	result += PyModule_AddIntMacro(module, NETID_3G_READ_DATALINK_CM_TX_MSG);
	result += PyModule_AddIntMacro(module, NETID_3G_READ_DATALINK_CM_RX_MSG);
	result += PyModule_AddIntMacro(module, NETID_3G_LOGGING_OVERFLOW);
	result += PyModule_AddIntMacro(module, NETID_3G_READ_SETTINGS_EX);
	result += PyModule_AddIntMacro(module, NETID_HSCAN4);
	result += PyModule_AddIntMacro(module, NETID_HSCAN5);
	result += PyModule_AddIntMacro(module, NETID_RS232);
	result += PyModule_AddIntMacro(module, NETID_UART);
	result += PyModule_AddIntMacro(module, NETID_UART2);
	result += PyModule_AddIntMacro(module, NETID_UART3);
	result += PyModule_AddIntMacro(module, NETID_UART4);
	result += PyModule_AddIntMacro(module, NETID_SWCAN2);
	result += PyModule_AddIntMacro(module, NETID_ETHERNET_DAQ);
	result += PyModule_AddIntMacro(module, NETID_DATA_TO_HOST);
	result += PyModule_AddIntMacro(module, NETID_TEXTAPI_TO_HOST);
	result += PyModule_AddIntMacro(module, NETID_SPI1);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET6);
	result += PyModule_AddIntMacro(module, NETID_RED_VBAT);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET7);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET8);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET9);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET10);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET11);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY1A);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY1B);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY2A);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY2B);
	result += PyModule_AddIntMacro(module, NETID_LIN5);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY);
	result += PyModule_AddIntMacro(module, NETID_FLEXRAY2);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET12);
	result += PyModule_AddIntMacro(module, NETID_I2C1);
	result += PyModule_AddIntMacro(module, NETID_MOST25);
	result += PyModule_AddIntMacro(module, NETID_MOST50);
	result += PyModule_AddIntMacro(module, NETID_MOST150);
	result += PyModule_AddIntMacro(module, NETID_ETHERNET);
	result += PyModule_AddIntMacro(module, NETID_GMFSA);
	result += PyModule_AddIntMacro(module, NETID_TCP);
	result += PyModule_AddIntMacro(module, NETID_HSCAN6);
	result += PyModule_AddIntMacro(module, NETID_HSCAN7);
	result += PyModule_AddIntMacro(module, NETID_LIN6);
	result += PyModule_AddIntMacro(module, NETID_LSFTCAN2);
	result += PyModule_AddIntMacro(module, NETID_HW_COM_LATENCY_TEST);
	result += PyModule_AddIntMacro(module, NETID_DEVICE_STATUS);
	result += PyModule_AddIntMacro(module, NETID_UDP);
	result += PyModule_AddIntMacro(module, NETID_AUTOSAR);
	result += PyModule_AddIntMacro(module, NETID_FORWARDED_MESSAGE);
	result += PyModule_AddIntMacro(module, NETID_I2C2);
	result += PyModule_AddIntMacro(module, NETID_I2C3);
	result += PyModule_AddIntMacro(module, NETID_I2C4);
	result += PyModule_AddIntMacro(module, NETID_ETHERNET2);
	result += PyModule_AddIntMacro(module, NETID_ETHERNET_TX_WRAP);
	result += PyModule_AddIntMacro(module, NETID_A2B_01);
	result += PyModule_AddIntMacro(module, NETID_A2B_02);
	result += PyModule_AddIntMacro(module, NETID_ETHERNET3);
	result += PyModule_AddIntMacro(module, NETID_ISM_LOGGER);
	result += PyModule_AddIntMacro(module, NETID_CAN_SWITCH);
	result += PyModule_AddIntMacro(module, NETID_WBMS);
	result += PyModule_AddIntMacro(module, NETID_WBMS2);
	result += PyModule_AddIntMacro(module, NETID_DWCAN_09);
	result += PyModule_AddIntMacro(module, NETID_DWCAN_10);
	result += PyModule_AddIntMacro(module, NETID_DWCAN_11);
	result += PyModule_AddIntMacro(module, NETID_DWCAN_12);
	result += PyModule_AddIntMacro(module, NETID_DWCAN_13);
	result += PyModule_AddIntMacro(module, NETID_DWCAN_14);
	result += PyModule_AddIntMacro(module, NETID_DWCAN_15);
	result += PyModule_AddIntMacro(module, NETID_DWCAN_16);
	result += PyModule_AddIntMacro(module, NETID_LIN_07);
	result += PyModule_AddIntMacro(module, NETID_LIN_08);
	result += PyModule_AddIntMacro(module, NETID_SPI2);
	result += PyModule_AddIntMacro(module, NETID_MDIO_01);
	result += PyModule_AddIntMacro(module, NETID_MDIO_02);
	result += PyModule_AddIntMacro(module, NETID_MDIO_03);
	result += PyModule_AddIntMacro(module, NETID_MDIO_04);
	result += PyModule_AddIntMacro(module, NETID_MDIO_05);
	result += PyModule_AddIntMacro(module, NETID_MDIO_06);
	result += PyModule_AddIntMacro(module, NETID_MDIO_07);
	result += PyModule_AddIntMacro(module, NETID_MDIO_08);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET13);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET14);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET15);
	result += PyModule_AddIntMacro(module, NETID_OP_ETHERNET16);
	result += PyModule_AddIntMacro(module, NETID_MAX);
	result += PyModule_AddIntMacro(module, NETID_INVALID);
	result += PyModule_AddIntMacro(module, NEODEVICE_UNKNOWN);
	result += PyModule_AddIntMacro(module, NEODEVICE_BLUE);
	result += PyModule_AddIntMacro(module, NEODEVICE_ECU_AVB);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADSUPERMOON);
	result += PyModule_AddIntMacro(module, NEODEVICE_DW_VCAN);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADMOON2);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADGIGALOG);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCAN41);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADPLUTO);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCAN42_EL);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADIO_CANHUB);
	result += PyModule_AddIntMacro(module, NEODEVICE_NEOECU12);
	result += PyModule_AddIntMacro(module, NEODEVICE_OBD2_LC);
	result += PyModule_AddIntMacro(module, NEODEVICE_RAD_MOON_DUO);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE3);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCAN3);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADJUPITER);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCAN4_IND);
	result += PyModule_AddIntMacro(module, NEODEVICE_GIGASTAR);
	result += PyModule_AddIntMacro(module, NEODEVICE_RED2);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE2_REDLINE);
	result += PyModule_AddIntMacro(module, NEODEVICE_ETHER_BADGE);
	result += PyModule_AddIntMacro(module, NEODEVICE_RAD_A2B);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADEPSILON);
	result += PyModule_AddIntMacro(module, NEODEVICE_OBD2_SIM_DOIP);
	result += PyModule_AddIntMacro(module, NEODEVICE_OBD2_DEV);
	result += PyModule_AddIntMacro(module, NEODEVICE_ECU22);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADEPSILON_T);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADEPSILON_EXPRESS);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADPROXIMA);
	result += PyModule_AddIntMacro(module, NEODEVICE_NEW_DEVICE_58);
	result += PyModule_AddIntMacro(module, NEODEVICE_NEW_DEVICE_59);
	result += PyModule_AddIntMacro(module, NEODEVICE_RAD_BMS);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADMOON3);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADCOMET);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE3_FLEXRAY);
	result += PyModule_AddIntMacro(module, NEODEVICE_RED2_OEM);
	result += PyModule_AddIntMacro(module, NEODEVICE_NEW_DEVICE_27);
	result += PyModule_AddIntMacro(module, NEODEVICE_RED);
	result += PyModule_AddIntMacro(module, NEODEVICE_ECU);
	result += PyModule_AddIntMacro(module, NEODEVICE_IEVB);
	result += PyModule_AddIntMacro(module, NEODEVICE_PENDANT);
	result += PyModule_AddIntMacro(module, NEODEVICE_OBD2_PRO);
	result += PyModule_AddIntMacro(module, NEODEVICE_ECUCHIP_UART);
	result += PyModule_AddIntMacro(module, NEODEVICE_PLASMA);
	result += PyModule_AddIntMacro(module, NEODEVICE_DONT_REUSE0);
	result += PyModule_AddIntMacro(module, NEODEVICE_NEOANALOG);
	result += PyModule_AddIntMacro(module, NEODEVICE_CT_OBD);
	result += PyModule_AddIntMacro(module, NEODEVICE_DONT_REUSE1);
	result += PyModule_AddIntMacro(module, NEODEVICE_DONT_REUSE2);
	result += PyModule_AddIntMacro(module, NEODEVICE_ION);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADSTAR);
	result += PyModule_AddIntMacro(module, NEODEVICE_DONT_REUSE3);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCAN44);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCAN42);
	result += PyModule_AddIntMacro(module, NEODEVICE_CMPROBE);
	result += PyModule_AddIntMacro(module, NEODEVICE_EEVB);
	result += PyModule_AddIntMacro(module, NEODEVICE_VCANRF);
	result += PyModule_AddIntMacro(module, NEODEVICE_FIRE2);
	result += PyModule_AddIntMacro(module, NEODEVICE_FLEX);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADGALAXY);
	result += PyModule_AddIntMacro(module, NEODEVICE_RADSTAR2);
	result += PyModule_AddIntMacro(module, NEODEVICE_VIVIDCAN);
	result += PyModule_AddIntMacro(module, NEODEVICE_OBD2_SIM);
	result += PyModule_AddIntMacro(module, NEODEVICE_ANY_PLASMA);
	result += PyModule_AddIntMacro(module, NEODEVICE_ANY_ION);
	result += PyModule_AddIntMacro(module, NEODEVICE_NEOECUCHIP);
	result += PyModule_AddIntMacro(module, DEVICECOUNT_FOR_EXPLORER);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_MSCAN);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN2);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN3);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_SWCAN);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN4);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN5);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN6);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_HSCAN7);
	result += PyModule_AddIntMacro(module, ISO15765_2_NETWORK_SWCAN2);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE1_OFFSET);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE2_OFFSET);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE_NUM);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE1_OFFSET_RANGE2);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE2_OFFSET_RANGE2);
	result += PyModule_AddIntMacro(module, PLASMA_SLAVE3_OFFSET_RANGE2);
	result += PyModule_AddIntMacro(module, SCRIPT_STATUS_STOPPED);
	result += PyModule_AddIntMacro(module, SCRIPT_STATUS_RUNNING);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_FLASH_MEM);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_INTERNAL_FLASH);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_SDCARD);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_VCAN3_MEM);
	result += PyModule_AddIntMacro(module, SCRIPT_LOCATION_EMMC);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CUSTOM);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CAN);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GMLAN);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_J1850VPW);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_J1850PWM);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_ISO9141);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_Keyword2000);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GM_ALDL_UART);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CHRYSLER_CCD);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CHRYSLER_SCI);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_FORD_UBP);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_BEAN);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_LIN);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_J1708);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CHRYSLER_JVPW);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_J1939);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_FLEXRAY);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_MOST);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CGI);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GME_CIM_SCL_KLINE);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_SPI);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_I2C);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GENERIC_UART);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_JTAG);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_UNIO);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_DALLAS_1WIRE);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GENERIC_MANCHSESTER);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_SENT_PROTOCOL);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_UART);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_ETHERNET);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_CANFD);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_GMFSA);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_TCP);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_UDP);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_AUTOSAR);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_A2B);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_WBMS);
	result += PyModule_AddIntMacro(module, SPY_PROTOCOL_MDIO);
	result += PyModule_AddIntMacro(module, SPY_STATUS_GLOBAL_ERR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_TX_MSG);
	result += PyModule_AddIntMacro(module, SPY_STATUS_XTD_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS_REMOTE_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CRC_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CAN_ERROR_PASSIVE);
	result += PyModule_AddIntMacro(module, SPY_STATUS_HEADERCRC_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_INCOMPLETE_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS_LOST_ARBITRATION);
	result += PyModule_AddIntMacro(module, SPY_STATUS_UNDEFINED_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CAN_BUS_OFF);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BUS_RECOVERED);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BUS_SHORTED_PLUS);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BUS_SHORTED_GND);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CHECKSUM_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BAD_MESSAGE_BIT_TIME_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_TX_NOMATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS_COMM_IN_OVERFLOW);
	result += PyModule_AddIntMacro(module, SPY_STATUS_EXPECTED_LEN_MISMATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS_MSG_NO_MATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS_BREAK);
	result += PyModule_AddIntMacro(module, SPY_STATUS_AVSI_REC_OVERFLOW);
	result += PyModule_AddIntMacro(module, SPY_STATUS_TEST_TRIGGER);
	result += PyModule_AddIntMacro(module, SPY_STATUS_AUDIO_COMMENT);
	result += PyModule_AddIntMacro(module, SPY_STATUS_GPS_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS_ANALOG_DIGITAL_INPUT);
	result += PyModule_AddIntMacro(module, SPY_STATUS_TEXT_COMMENT);
	result += PyModule_AddIntMacro(module, SPY_STATUS_NETWORK_MESSAGE_TYPE);
	result += PyModule_AddIntMacro(module, SPY_STATUS_VSI_TX_UNDERRUN);
	result += PyModule_AddIntMacro(module, SPY_STATUS_VSI_IFR_CRC_BIT);
	result += PyModule_AddIntMacro(module, SPY_STATUS_INIT_MESSAGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS_LIN_MASTER);
	result += PyModule_AddIntMacro(module, SPY_STATUS_CANFD);
	result += PyModule_AddIntMacro(module, SPY_STATUS_A2B_CONTROL);
	result += PyModule_AddIntMacro(module, SPY_STATUS_A2B_SCF_VALID_WAITING);
	result += PyModule_AddIntMacro(module, SPY_STATUS_A2B_MONITOR);
	result += PyModule_AddIntMacro(module, SPY_STATUS_A2B_UPSTREAM);
	result += PyModule_AddIntMacro(module, SPY_STATUS_PDU);
	result += PyModule_AddIntMacro(module, SPY_STATUS_FLEXRAY_PDU);
	result += PyModule_AddIntMacro(module, SPY_STATUS_HIGH_SPEED);
	result += PyModule_AddIntMacro(module, SPY_STATUS_EXTENDED);
	result += PyModule_AddIntMacro(module, SPY_STATUS_FLEXRAY_PDU_UPDATE_BIT_SET);
	result += PyModule_AddIntMacro(module, SPY_STATUS_FLEXRAY_PDU_NO_UPDATE_BIT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_HAS_VALUE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_VALUE_IS_BOOLEAN);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_HIGH_VOLTAGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LONG_MESSAGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_GLOBAL_CHANGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ERROR_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_END_OF_LONG_MESSAGE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_I2C_ERR_TIMEOUT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_I2C_ERR_NACK);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_I2C_DIR_READ);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_ERR_TIMEOUT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_JOB_CANCELLED);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_INVALID_BUS);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_INVALID_PHYADDR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_INVALID_REGADDR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_UNSUPPORTED_CLAUSE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_UNSUPPORTED_OPCODE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_OVERFLOW);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_CLAUSE45);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MDIO_READ);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_RX_BREAK_NOT_0);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_RX_BREAK_TOO_SHORT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_RX_SYNC_NOT_55);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_RX_DATA_GREATER_8);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_TX_RX_MISMATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ERR_MSG_ID_PARITY);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ISO_FRAME_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_SYNC_FRAME_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ISO_OVERFLOW_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_ID_FRAME_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ISO_PARITY_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_SLAVE_BYTE_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_RX_TIMEOUT_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_LIN_NO_SLAVE_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_LIN_JUST_BREAK_SYNC);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_LIN_SLAVE_DATA_TOO_SHORT);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_LIN_ONLY_UPDATE_SLAVE_TABLE_ONCE);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_PACKET_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_LOW_LEVEL);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_CONTROL_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_MHP_USER_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_MHP_CONTROL_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_I2S_DUMP);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_TOO_SHORT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_MOST50);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_MOST150);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_MOST_CHANGED_PAR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_CRC_ERROR);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_FRAME_TOO_SHORT);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_NO_PADDING);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_PREEMPTION_ENABLED);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_UPDATE_CHECKSUMS);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_MANUALFCS_ENABLED);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_FCS_VERIFIED);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_T1S_SYMBOL);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_T1S_BURST);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_ETHERNET_T1S_ETHERNET);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_TX_AB);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_TX_AB_NO_A);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_TX_AB_NO_B);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_TX_AB_NO_MATCH);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_NO_CRC);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_FLEXRAY_NO_HEADERCRC);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_CAN_ISO15765_LOGICAL_FRAME);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_CAN_HAVE_LINK_DATA);
	result += PyModule_AddIntMacro(module, SPY_STATUS2_WBMS_API_IS_CALLBACK);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_ESI);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_IDE);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_RTR);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_FDF);
	result += PyModule_AddIntMacro(module, SPY_STATUS3_CANFD_BRS);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_HS_CAN_CNF1);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_HS_CAN_CNF2);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_HS_CAN_CNF3);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_HS_CAN_MODE);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_MS_CAN_CNF1);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_MS_CAN_CNF2);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_MS_CAN_CNF3);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_SW_CAN_CNF1);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_SW_CAN_CNF2);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_SW_CAN_CNF3);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_LSFT_CAN_CNF1);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_LSFT_CAN_CNF2);
	result += PyModule_AddIntMacro(module, NEO_CFG_MPIC_LSFT_CAN_CNF3);
	result += PyModule_AddObject(module, "NEOVI_TIMESTAMP_2", PyFloat_FromDouble(NEOVI_TIMESTAMP_2));
	result += PyModule_AddObject(module, "NEOVI_TIMESTAMP_1", PyFloat_FromDouble(NEOVI_TIMESTAMP_1));
	result += PyModule_AddObject(module, "NEOVIPRO_VCAN_TIMESTAMP_2", PyFloat_FromDouble(NEOVIPRO_VCAN_TIMESTAMP_2));
	result += PyModule_AddObject(module, "NEOVIPRO_VCAN_TIMESTAMP_1", PyFloat_FromDouble(NEOVIPRO_VCAN_TIMESTAMP_1));
	result += PyModule_AddObject(module, "NEOVI6_VCAN_TIMESTAMP_2", PyFloat_FromDouble(NEOVI6_VCAN_TIMESTAMP_2));
	result += PyModule_AddObject(module, "NEOVI6_VCAN_TIMESTAMP_1", PyFloat_FromDouble(NEOVI6_VCAN_TIMESTAMP_1));
	result += PyModule_AddObject(module, "NEOVI_RED_TIMESTAMP_2_25NS", PyFloat_FromDouble(NEOVI_RED_TIMESTAMP_2_25NS));
	result += PyModule_AddObject(module, "NEOVI_RED_TIMESTAMP_1_25NS", PyFloat_FromDouble(NEOVI_RED_TIMESTAMP_1_25NS));
	result += PyModule_AddObject(module, "NEOVI_RED_TIMESTAMP_2_10NS", PyFloat_FromDouble(NEOVI_RED_TIMESTAMP_2_10NS));
	result += PyModule_AddObject(module, "NEOVI_RED_TIMESTAMP_1_10NS", PyFloat_FromDouble(NEOVI_RED_TIMESTAMP_1_10NS));
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NONE);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_VSI);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_AVT_716);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NI_CAN);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEOVI);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_AVT_717);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEOv6_VCAN);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_DOUBLE_SEC);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEORED_10US);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEORED_25NS);
	result += PyModule_AddIntMacro(module, HARDWARE_TIMESTAMP_ID_NEORED_10NS);
	result += PyModule_AddIntMacro(module, HADRWARE_TIMESTAMP_ID_FIXED);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_PERIODIC);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_EMISC1_DIGITAL);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_EMISC2_DIGITAL);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_MISC5_DIGITAL);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_MISC6_DIGITAL);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_EMISC1_ANALOG);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_EMISC2_ANALOG);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_VBATT_ANALOG);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_TEMP_ANALOG);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_PWM_IN);
	result += PyModule_AddIntMacro(module, FIRE2_REPORT_GPS);
	result += PyModule_AddIntMacro(module, FIRE3_REPORT_ORIENTATION);
	result += PyModule_AddIntMacro(module, CANNODE_STATUS_COREMINI_IS_RUNNING);
	result += PyModule_AddIntMacro(module, CANNODE_STATUS_IN_BOOTLOADER);
	result += PyModule_AddIntMacro(module, MAIN_VNET);
	result += PyModule_AddIntMacro(module, SLAVE_VNET_A);
	result += PyModule_AddIntMacro(module, SLAVE_VNET_B);
	result += PyModule_AddIntMacro(module, WIFI_CONNECTION);
	result += PyModule_AddIntMacro(module, REGISTER_BY_SERIAL);
	result += PyModule_AddIntMacro(module, TCP_SUPPORTED);
	result += PyModule_AddIntMacro(module, DRIVER_MASK);
	result += PyModule_AddIntMacro(module, DRIVER_USB1);
	result += PyModule_AddIntMacro(module, DRIVER_USB2);
	result += PyModule_AddIntMacro(module, DRIVER_USB3);
	// enum
	result += PyModule_AddIntMacro(module, AUTO);
	result += PyModule_AddIntMacro(module, USE_TQ);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, BPS20);
	result += PyModule_AddIntMacro(module, BPS33);
	result += PyModule_AddIntMacro(module, BPS50);
	result += PyModule_AddIntMacro(module, BPS62);
	result += PyModule_AddIntMacro(module, BPS83);
	result += PyModule_AddIntMacro(module, BPS100);
	result += PyModule_AddIntMacro(module, BPS125);
	result += PyModule_AddIntMacro(module, BPS250);
	result += PyModule_AddIntMacro(module, BPS500);
	result += PyModule_AddIntMacro(module, BPS800);
	result += PyModule_AddIntMacro(module, BPS1000);
	result += PyModule_AddIntMacro(module, BPS666);
	result += PyModule_AddIntMacro(module, BPS2000);
	result += PyModule_AddIntMacro(module, BPS4000);
	result += PyModule_AddIntMacro(module, CAN_BPS5000);
	result += PyModule_AddIntMacro(module, CAN_BPS6667);
	result += PyModule_AddIntMacro(module, CAN_BPS8000);
	result += PyModule_AddIntMacro(module, CAN_BPS10000);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, NORMAL);
	result += PyModule_AddIntMacro(module, DISABLE);
	result += PyModule_AddIntMacro(module, LOOPBACK);
	result += PyModule_AddIntMacro(module, LISTEN_ONLY);
	result += PyModule_AddIntMacro(module, LISTEN_ALL);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, CAN_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, NO_CANFD);
	result += PyModule_AddIntMacro(module, CANFD_ENABLED);
	result += PyModule_AddIntMacro(module, CANFD_BRS_ENABLED);
	result += PyModule_AddIntMacro(module, CANFD_ENABLED_ISO);
	result += PyModule_AddIntMacro(module, CANFD_BRS_ENABLED_ISO);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, CANFD_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, SWCAN_AUTOSWITCH_DISABLED);
	result += PyModule_AddIntMacro(module, SWCAN_AUTOSWITCH_NO_RESISTOR);
	result += PyModule_AddIntMacro(module, SWCAN_AUTOSWITCH_WITH_RESISTOR);
	result += PyModule_AddIntMacro(module, SWCAN_AUTOSWITCH_DISABLED_RESISTOR_ENABLED);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, SWCAN_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, BPS5000);
	result += PyModule_AddIntMacro(module, BPS10400);
	result += PyModule_AddIntMacro(module, BPS33333);
	result += PyModule_AddIntMacro(module, BPS50000);
	result += PyModule_AddIntMacro(module, BPS62500);
	result += PyModule_AddIntMacro(module, BPS71429);
	result += PyModule_AddIntMacro(module, BPS83333);
	result += PyModule_AddIntMacro(module, BPS100000);
	result += PyModule_AddIntMacro(module, BPS117647);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, RESISTOR_ON);
	result += PyModule_AddIntMacro(module, RESISTOR_OFF);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, SLEEP_MODE);
	result += PyModule_AddIntMacro(module, SLOW_MODE);
	result += PyModule_AddIntMacro(module, NORMAL_MODE);
	result += PyModule_AddIntMacro(module, FAST_MODE);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, LIN_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, ISO9141_KEYWORD2000__INIT_STEP_SIZE);
	result += PyModule_AddIntMacro(module, ISO9141_KEYWORD2000_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, UART_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, J1708_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, SRedSettings_SIZE);
	result += PyModule_AddIntMacro(module, STextAPISettings_SIZE);
	result += PyModule_AddIntMacro(module, stChipVersions_SIZE);
	result += PyModule_AddIntMacro(module, SNeoMostGatewaySettings_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, OPETH_FUNC_TAP);
	result += PyModule_AddIntMacro(module, OPETH_FUNC_MEDIACONVERTER);
	result += PyModule_AddIntMacro(module, OPETH_FUNC_TAP_LOW_LATENCY);
	result += PyModule_AddIntMacro(module, OPETH_FUNC_RAW_MEDIA_CONVERTER);
	result += PyModule_AddIntMacro(module, OPETH_FUNC_RAW_MEDIA_CONVERTER2);
	result += PyModule_AddIntMacro(module, OPETH_FUNC_RAW_MEDIA_CONVERTER2_LOW_LATENCY);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, OP_ETH_GENERAL_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, RAD_GPTP_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, RAD_GPTP_AND_TAP_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, HW_ETH_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, OPETH_LINK_AUTO);
	result += PyModule_AddIntMacro(module, OPETH_LINK_MASTER);
	result += PyModule_AddIntMacro(module, OPETH_LINK_SLAVE);
	// end of enum -  } opEthLinkMode;

	// enum
	result += PyModule_AddIntMacro(module, OPETH_MAC_SPOOF_DST_ADDR);
	result += PyModule_AddIntMacro(module, OPETH_MAC_SPOOF_SRC_ADDR);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, OP_ETH_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG_FULL_DUPLEX);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG_AUTO_NEG);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG_TCPIP_ENABLE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG_RTSP_ENABLE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG_DEVICE_HOSTING_ENABLE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG_CONFIG_NOT_ALLOWED);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG_ICS_SFP);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG_COMM_IN_USE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG2_LINK_MODE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG2_PHY_MODE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG2_LINK_MODE_AUTO);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG2_SFP_ID_SHIFT);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_FLAG2_SFP_ID_MASK);
	// enum
	result += PyModule_AddIntMacro(module, SFP_ID_UNKNOWN);
	result += PyModule_AddIntMacro(module, SFP_ID_FINISAR_FCLF8522P2BTL);
	result += PyModule_AddIntMacro(module, SFP_ID_FS_GB_GE_T);
	result += PyModule_AddIntMacro(module, SFP_ID_ICS_MV2112A2);
	result += PyModule_AddIntMacro(module, SFP_ID_ICS_MV2221MB1);
	result += PyModule_AddIntMacro(module, SFP_ID_ICS_MV3244);
	result += PyModule_AddIntMacro(module, SFP_ID_MAX);
	// end of enum -  } SfpId;

	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS2_SIZE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_FULL_DUPLEX);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_AUTO_NEG);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_TCPIP_ENABLE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_RTSP_ENABLE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_DEVICE_HOSTING_ENABLE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_CONFIG_NOT_ALLOWED);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_ICS_SFP);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_LINK_MODE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_PHY_MODE);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_LINK_MODE_AUTO);
	result += PyModule_AddIntMacro(module, ETHERNET_SETTINGS10G_FLAG_COMM_IN_USE);
	result += PyModule_AddIntMacro(module, ETHERNET10G_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, ETHERNET10T1S_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, ETHERNET10T1S_SETTINGS_FLAG_ENABLE_PLCA);
	result += PyModule_AddIntMacro(module, ETHERNET10T1S_SETTINGS_FLAG_TERMINATION);
	result += PyModule_AddIntMacro(module, ETHERNET10T1S_SETTINGS_FLAG_BUS_DECODING_BEACONS);
	result += PyModule_AddIntMacro(module, ETHERNET10T1S_SETTINGS_FLAG_BUS_DECODING_ALL);
	// enum
	result += PyModule_AddIntMacro(module, MACSEC_PACKET_NO_VLAN_OR_MPLS);
	result += PyModule_AddIntMacro(module, MACSEC_PACKET_SINGLE_VLAN);
	result += PyModule_AddIntMacro(module, MACSEC_PACKET_DUAL_VLAN);
	result += PyModule_AddIntMacro(module, MACSEC_PACKET_MPLS);
	result += PyModule_AddIntMacro(module, MACSEC_PACKET_SINGLE_VLAN_FOLLOW_BY_MPLS);
	result += PyModule_AddIntMacro(module, MACSEC_PACKET_DUAL_VLAN_FOLLOW_BY_MPLS);
	result += PyModule_AddIntMacro(module, MACSEC_PACKET_UNSUPPORTED_TYPE);
	// end of enum -  } MACSEC_PACKET_TYPE;

	result += PyModule_AddIntMacro(module, MACSEC_SETTINGS_RULE_SIZE);
	result += PyModule_AddIntMacro(module, MACSEC_SETTINGS_MAP_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, MACSEC_VF_DISABLED);
	result += PyModule_AddIntMacro(module, MACSEC_VF_CHECK);
	result += PyModule_AddIntMacro(module, MACSEC_VF_STRICT);
	result += PyModule_AddIntMacro(module, MACSEC_VF_NA);
	// end of enum -  } MACSEC_VALIDATEFRAME;

	// enum
	result += PyModule_AddIntMacro(module, MACSEC_SECTAG_ICV_BOTH_STRIP);
	result += PyModule_AddIntMacro(module, MACSEC_SECTAG_ICV_RESERVED);
	result += PyModule_AddIntMacro(module, MACSEC_SECTAG_ICV_STRIP_ICV_ONLY);
	result += PyModule_AddIntMacro(module, MACSEC_SECTAG_ICV_NO_STRIP);
	// end of enum -  } MACSEC_STRIP_SECTAG_ICV;

	// enum
	result += PyModule_AddIntMacro(module, MACSEC_CIPHER_GCM_AES_128);
	result += PyModule_AddIntMacro(module, MACSEC_CIPHER_GCM_AES_256);
	result += PyModule_AddIntMacro(module, MACSEC_CIPHER_GCM_AES_128_XPN);
	result += PyModule_AddIntMacro(module, MACSEC_CIPHER_GCM_AES_256_XPN);
	// end of enum -  } MACSEC_CIPHER_SUITE;

	result += PyModule_AddIntMacro(module, MACSEC_SETTINGS_SECY_SIZE);
	result += PyModule_AddIntMacro(module, MACSEC_SETTINGS_SC_SIZE);
	result += PyModule_AddIntMacro(module, MACSEC_SETTINGS_SA_SIZE);
	result += PyModule_AddIntMacro(module, MACSEC_SETTINGS_FLAGS_SIZE);
	result += PyModule_AddIntMacro(module, MACSEC_NUM_FLAGS_PER_CONFIG);
	result += PyModule_AddIntMacro(module, MACSEC_NUM_RULES_PER_CONFIG);
	result += PyModule_AddIntMacro(module, MACSEC_NUM_MAPS_PER_CONFIG);
	result += PyModule_AddIntMacro(module, MACSEC_NUM_SECY_PER_CONFIG);
	result += PyModule_AddIntMacro(module, MACSEC_NUM_SC_PER_CONFIG);
	result += PyModule_AddIntMacro(module, MACSEC_NUM_SA_PER_CONFIG);
	result += PyModule_AddIntMacro(module, MACSEC_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, LOGGER_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, DISK_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, CANTERM_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, TIMESYNC_ICSHARDWARE_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, DiskFormatUnknown);
	result += PyModule_AddIntMacro(module, DiskFormatFAT32);
	result += PyModule_AddIntMacro(module, DiskFormatexFAT);
	// end of enum -  } EDiskFormat;

	// enum
	result += PyModule_AddIntMacro(module, DiskLayoutSpanned);
	result += PyModule_AddIntMacro(module, DiskLayoutRAID0);
	result += PyModule_AddIntMacro(module, DiskLayoutRAID1);
	result += PyModule_AddIntMacro(module, DiskLayoutRAID5);
	result += PyModule_AddIntMacro(module, DiskLayoutIndividual);
	// end of enum -  } EDiskLayout;

	result += PyModule_AddIntMacro(module, DISK_STATUS_FLAG_PRESENT);
	result += PyModule_AddIntMacro(module, DISK_STATUS_FLAG_INITIALIZED);
	result += PyModule_AddIntMacro(module, SDiskStatus_SIZE);
	result += PyModule_AddIntMacro(module, DISK_STRUCTURE_FLAG_FULL_FORMAT);
	result += PyModule_AddIntMacro(module, SDiskStructure_SIZE);
	result += PyModule_AddIntMacro(module, SDiskDetails_SIZE);
	result += PyModule_AddIntMacro(module, SDiskFormatProgress_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, EXTENDED_RESPONSE_OK);
	result += PyModule_AddIntMacro(module, EXTENDED_RESPONSE_INVALID_COMMAND);
	result += PyModule_AddIntMacro(module, EXTENDED_RESPONSE_INVALID_STATE);
	result += PyModule_AddIntMacro(module, EXTENDED_RESPONSE_OPERATION_FAILED);
	result += PyModule_AddIntMacro(module, EXTENDED_RESPONSE_OPERATION_PENDING);
	result += PyModule_AddIntMacro(module, EXTENDED_RESPONSE_INVALID_PARAMETER);
	// end of enum -  } ExtendedResponseCode;

	result += PyModule_AddIntMacro(module, GENERIC_API_DATA_BUFFER_SIZE);
	result += PyModule_AddIntMacro(module, GET_SUPPORTED_FEATURES_COMMAND_VERSION);
	result += PyModule_AddIntMacro(module, MAX_REPORTED_VERSIONS);
	// enum
	result += PyModule_AddIntMacro(module, swUpdateWrite);
	result += PyModule_AddIntMacro(module, swUpdateErase);
	result += PyModule_AddIntMacro(module, swUpdateGetProgress);
	result += PyModule_AddIntMacro(module, swUpdateValidateAll);
	result += PyModule_AddIntMacro(module, swUpdateGetBufferSize);
	result += PyModule_AddIntMacro(module, swUpdateCheckHostVersion);
	result += PyModule_AddIntMacro(module, swUpdateValidateComponent);
	result += PyModule_AddIntMacro(module, swUpdateFinalize);
	result += PyModule_AddIntMacro(module, swUpdateGetCommunicationVersion);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, SExtSubCmdHdr_SIZE);
	result += PyModule_AddIntMacro(module, GENERIC_BINARY_STATUS_ERROR_UNKNOWN_BINARY);
	result += PyModule_AddIntMacro(module, GENERIC_BINARY_STATUS_ERROR_OVERSIZE);
	result += PyModule_AddIntMacro(module, GENERIC_BINARY_STATUS_ERROR_BINARY_EMPTY);
	result += PyModule_AddIntMacro(module, GENERIC_BINARY_STATUS_ERROR_ANY_MASK);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_RTSP_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_AUTO_DET_RES_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_CONFIG_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_LOGGING_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_TX0_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_TX1_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_TX2_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_FLAG_TX3_ENABLE);
	// enum
	result += PyModule_AddIntMacro(module, SERDESCAM_MODE_TAP_REPEATER);
	result += PyModule_AddIntMacro(module, SERDESCAM_MODE_SPLITTER);
	result += PyModule_AddIntMacro(module, SERDESCAM_MODE_LOG_ONLY);
	result += PyModule_AddIntMacro(module, SERDESCAM_MODE_CUSTOM);
	result += PyModule_AddIntMacro(module, SERDESCAM_MODE_COUNT);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, SERDESCAM_PIXEL_BIT_POS_0);
	result += PyModule_AddIntMacro(module, SERDESCAM_PIXEL_BIT_POS_1);
	result += PyModule_AddIntMacro(module, SERDESCAM_PIXEL_BIT_POS_2);
	result += PyModule_AddIntMacro(module, SERDESCAM_PIXEL_BIT_POS_3);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_NONE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_UYVY_422_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_YUYV_422_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_YVYU_422_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_VYUY_422_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_BGGR_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_10);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_12);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_16);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_20);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_24);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_30);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_32);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_36);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RGB888);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_UYVY_422_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_YUYV_422_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_YVYU_422_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_VYUY_422_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_BGGR_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_BGGR_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_BGGR_16LE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_BGGR_16BE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_JPEG);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_UYVY_422_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_YUYV_422_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_YVYU_422_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_VYUY_422_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_YUV422_10LE_PLANAR);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_YUV422_16LE_PLANAR);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RGB565);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RGB666);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_11x2);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_12x2);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_RAW_14);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_UYVY_422_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_YUYV_422_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_YVYU_422_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_VYUY_422_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_UYVY_422_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_YUYV_422_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_YVYU_422_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_VYUY_422_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_UYVY_422_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_YUYV_422_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_YVYU_422_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_VYUY_422_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RGB565);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RGB666);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RGB888);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_BGGR_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_BGGR_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_BGGR_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_10);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_11x2);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_12);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_12x2);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_14);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_16);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_20);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_24);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_30);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_32);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_RAW_36);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_RGGB_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_RGGB_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_RGGB_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_RGGB_16LE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_RGGB_16BE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_RGGB_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_RGGB_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_RGGB_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GBRG_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GBRG_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GBRG_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GBRG_16LE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GBRG_16BE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_GBRG_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_GBRG_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_GBRG_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GRBG_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GRBG_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GRBG_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GRBG_16LE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_BAYER_GRBG_16BE);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_GRBG_8);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_GRBG_10LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_CSI2_BAYER_GRBG_12LE_PACKED);
	result += PyModule_AddIntMacro(module, SERDESCAM_VIDEO_FORMAT_COUNT);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, SERDESCAM_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, SERDESPOC_SETTINGS_MODE_DISABLED);
	result += PyModule_AddIntMacro(module, SERDESPOC_SETTINGS_MODE_SUPPLY);
	result += PyModule_AddIntMacro(module, SERDESPOC_SETTINGS_MODE_SERIALIZER);
	result += PyModule_AddIntMacro(module, SERDESPOC_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, SERDESGEN_MOD_ID_NONE);
	result += PyModule_AddIntMacro(module, SERDESGEN_MOD_ID_FPD3_2x2);
	result += PyModule_AddIntMacro(module, SERDESGEN_MOD_ID_GMSL2_2x2);
	result += PyModule_AddIntMacro(module, SERDESGEN_MOD_ID_GMSL1_4x4);
	result += PyModule_AddIntMacro(module, SERDESGEN_MOD_ID_FPD3_TO_GMSL2_2x2);
	result += PyModule_AddIntMacro(module, SERDESGEN_MOD_ID_UNKNOWN);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, SERDESGEN_SETTINGS_FLAG_TX_PATGEN_ENABLE);
	result += PyModule_AddIntMacro(module, SERDESGEN_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, RADMOONDUO_CONVERTER_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_TEMP_ENABLE);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_MIC2_GPS_ENABLE);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_INT_GPS_ENABLE);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_MIC2_GPS_ENABLE2);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_MISC1_DIN);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_MISC2_DIN);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_MISC1_PWMIN);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_MISC2_PWMIN);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_AIN1);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_SERDES_ENABLE);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_FLAG_FAN_SPEED_ENABLE);
	result += PyModule_AddIntMacro(module, RAD_REPORTING_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, REPORT_ON_PERIODIC);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC1);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC2);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC3);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC4);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC5);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC6);
	result += PyModule_AddIntMacro(module, REPORT_ON_LED1);
	result += PyModule_AddIntMacro(module, REPORT_ON_LED2);
	result += PyModule_AddIntMacro(module, REPORT_ON_KLINE);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC3_AIN);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC4_AIN);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC5_AIN);
	result += PyModule_AddIntMacro(module, REPORT_ON_MISC6_AIN);
	result += PyModule_AddIntMacro(module, REPORT_ON_GPS);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, VNETBITS_FEATURE_ANDROID_MSGS);
	result += PyModule_AddIntMacro(module, SFireSettings_SIZE);
	result += PyModule_AddIntMacro(module, VNETBITS_FEATURE_ANDROID_MSGS);
	result += PyModule_AddIntMacro(module, VNETBITS_FEATURE_DISABLE_USB_CHECK);
	result += PyModule_AddIntMacro(module, SFireVnetSettings_SIZE);
	result += PyModule_AddIntMacro(module, SCyanSettings_SIZE);
	result += PyModule_AddIntMacro(module, SVCAN3Settings_SIZE);
	result += PyModule_AddIntMacro(module, SVCAN4Settings_SIZE);
	result += PyModule_AddIntMacro(module, SVCANRFSettings_SIZE);
	result += PyModule_AddIntMacro(module, SECUSettings_SIZE);
	result += PyModule_AddIntMacro(module, SPendantSettings_SIZE);
	result += PyModule_AddIntMacro(module, SIEVBSettings_SIZE);
	result += PyModule_AddIntMacro(module, SEEVBSettings_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, ePortDisabled);
	result += PyModule_AddIntMacro(module, ePortOpEth1);
	result += PyModule_AddIntMacro(module, ePortOpEth2);
	result += PyModule_AddIntMacro(module, ePortOpEth3);
	result += PyModule_AddIntMacro(module, ePortOpEth4);
	result += PyModule_AddIntMacro(module, ePortOpEth5);
	result += PyModule_AddIntMacro(module, ePortOpEth6);
	result += PyModule_AddIntMacro(module, ePortOpEth7);
	result += PyModule_AddIntMacro(module, ePortOpEth8);
	result += PyModule_AddIntMacro(module, ePortOpEth9);
	result += PyModule_AddIntMacro(module, ePortOpEth10);
	result += PyModule_AddIntMacro(module, ePortOpEth11);
	result += PyModule_AddIntMacro(module, ePortOpEth12);
	result += PyModule_AddIntMacro(module, ePortStdEth1);
	result += PyModule_AddIntMacro(module, ePortStdEth2);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, eRoleDisabled);
	result += PyModule_AddIntMacro(module, eRolePassive);
	result += PyModule_AddIntMacro(module, eRoleMaster);
	result += PyModule_AddIntMacro(module, eRoleSlave);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, SRADGalaxySettings_SIZE);
	result += PyModule_AddIntMacro(module, SRADStar2Settings_SIZE);
	result += PyModule_AddIntMacro(module, SRADSuperMoonSettings_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, tdmModeTDM2);
	result += PyModule_AddIntMacro(module, tdmModeTDM4);
	result += PyModule_AddIntMacro(module, tdmModeTDM8);
	result += PyModule_AddIntMacro(module, tdmModeTDM12);
	result += PyModule_AddIntMacro(module, tdmModeTDM16);
	result += PyModule_AddIntMacro(module, tdmModeTDM20);
	result += PyModule_AddIntMacro(module, tdmModeTDM24);
	result += PyModule_AddIntMacro(module, tdmModeTDM32);
	// end of enum -  } A2BTDMMode;

	// enum
	result += PyModule_AddIntMacro(module, a2bNodeTypeMonitor);
	result += PyModule_AddIntMacro(module, a2bNodeTypeMaster);
	result += PyModule_AddIntMacro(module, a2bNodeTypeSlave);
	// end of enum -  } A2BNodeType;

	result += PyModule_AddIntMacro(module, A2B_SETTINGS_FLAG_16BIT);
	result += PyModule_AddIntMacro(module, A2BMonitorSettings_SIZE);
	result += PyModule_AddIntMacro(module, SRADA2BSettings_SIZE);
	result += PyModule_AddIntMacro(module, SRADMoon2Settings_SIZE);
	result += PyModule_AddIntMacro(module, SRADMoon3Settings_SIZE);
	result += PyModule_AddIntMacro(module, SRADGigalogSettings_SIZE);
	result += PyModule_AddIntMacro(module, SRADGigastarSettings_SIZE);
	result += PyModule_AddIntMacro(module, SVividCANSettings_SIZE);
	result += PyModule_AddIntMacro(module, SOBD2SimSettings_SIZE);
	result += PyModule_AddIntMacro(module, CmProbeSettings_SIZE);
	result += PyModule_AddIntMacro(module, OBD2ProSettings_SIZE);
	result += PyModule_AddIntMacro(module, VCAN412Settings_SIZE);
	result += PyModule_AddIntMacro(module, SVCAN412Settings_SIZE);
	result += PyModule_AddIntMacro(module, ECU_AVBSettings_SIZE);
	result += PyModule_AddIntMacro(module, PLUTO_NUM_PORTS);
	result += PyModule_AddIntMacro(module, PLUTO_NUM_PRIORITY);
	result += PyModule_AddIntMacro(module, PLUTO_MAX_L2_POLICING);
	result += PyModule_AddIntMacro(module, PLUTO_MAX_L2_ADDRESS_LOOKUP);
	result += PyModule_AddIntMacro(module, PLUTO_MAX_VLAN_LOOKUP);
	result += PyModule_AddIntMacro(module, PLUTO_MAX_FORWARDING_ENTRIES);
	result += PyModule_AddIntMacro(module, PLUTO_MAX_MAC_CONFIG_ENTRIES);
	result += PyModule_AddIntMacro(module, PLUTO_MAX_RETAGGING_ENTRIES);
	result += PyModule_AddIntMacro(module, MAX_VL_POLICING_ENTRIES);
	result += PyModule_AddIntMacro(module, MAX_VL_FORWARDING_ENTRIES);
	result += PyModule_AddIntMacro(module, gPTP_ROLE_DISABLED);
	result += PyModule_AddIntMacro(module, gPTP_ROLE_PASSIVE);
	result += PyModule_AddIntMacro(module, gPTP_ROLE_MASTER);
	result += PyModule_AddIntMacro(module, gPTP_ROLE_SLAVE);
	result += PyModule_AddIntMacro(module, gPTP_PROFILE_STANDARD);
	result += PyModule_AddIntMacro(module, gPTP_PROFILE_AUTOMOTIVE);
	result += PyModule_AddIntMacro(module, gPTP_PORT_DISABLED);
	result += PyModule_AddIntMacro(module, gPTP_PORT_ENABLED);
	result += PyModule_AddIntMacro(module, SPlutoSwitchSettings_SIZE);
	result += PyModule_AddIntMacro(module, SRADPlutoSettings_SIZE);
	result += PyModule_AddIntMacro(module, CANHubSettings_SIZE);
	result += PyModule_AddIntMacro(module, SFlexVnetzSettings_Size);
	// enum
	result += PyModule_AddIntMacro(module, flexVnetModeDisabled);
	result += PyModule_AddIntMacro(module, flexVnetModeOneSingle);
	result += PyModule_AddIntMacro(module, flexVnetModeOneDual);
	result += PyModule_AddIntMacro(module, flexVnetModeTwoSingle);
	result += PyModule_AddIntMacro(module, flexVnetModeColdStart);
	// end of enum -  } flexVnetMode;

	result += PyModule_AddIntMacro(module, SNeoECU12Settings_SIZE);
	result += PyModule_AddIntMacro(module, VCAN4IndSettings_SIZE);
	result += PyModule_AddIntMacro(module, OBD2LCSettings_SIZE);
	result += PyModule_AddIntMacro(module, RADJUPITER_NUM_PORTS);
	result += PyModule_AddIntMacro(module, SRADJupiterSettings_SIZE);
	result += PyModule_AddIntMacro(module, LINUX_BOOT_ALLOWED);
	result += PyModule_AddIntMacro(module, WIFI_ANTENNA_INTERNAL);
	result += PyModule_AddIntMacro(module, WIFI_ANTENNA_EXTERNAL);
	result += PyModule_AddIntMacro(module, LINUX_CONFIG_PORT_NONE);
	result += PyModule_AddIntMacro(module, LINUX_CONFIG_PORT_ETH_01);
	result += PyModule_AddIntMacro(module, LINUX_CONFIG_PORT_ETH_02);
	result += PyModule_AddIntMacro(module, SRed2Settings_SIZE);
	result += PyModule_AddIntMacro(module, SFire3Settings_SIZE);
	result += PyModule_AddIntMacro(module, SFire3FlexraySettings_SIZE);
	result += PyModule_AddIntMacro(module, RadMoonDuoSettings_SIZE);
	result += PyModule_AddIntMacro(module, SEtherBadgeSettings_SIZE);
	result += PyModule_AddIntMacro(module, RADEPSILON_NUM_PORTS);
	result += PyModule_AddIntMacro(module, PROXIMA_NUM_PORTS);
	result += PyModule_AddIntMacro(module, RADEPSILON_MAX_PHY);
	result += PyModule_AddIntMacro(module, EPSILON_88Q6113_SWITCH_A);
	result += PyModule_AddIntMacro(module, EPSILON_88Q6113_SWITCH_B);
	// enum
	result += PyModule_AddIntMacro(module, EPSILON_10G_PHY1);
	result += PyModule_AddIntMacro(module, EPSILON_10G_PHY2);
	// end of enum -  } Epsilon_10G_PHY_select;

	result += PyModule_AddIntMacro(module, SRADEpsilonSettings_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, enumWILPortConfig_Single_Port_A);
	result += PyModule_AddIntMacro(module, enumWILPortConfig_Single_Port_B);
	result += PyModule_AddIntMacro(module, enumWILPortConfig_Dual_Port_A_And_B);
	result += PyModule_AddIntMacro(module, enumWILPortConfig_Single_Port_A_And_B);
	result += PyModule_AddIntMacro(module, _enumWILPortConfig_Total);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, SPI_PORT_ONBOARD);
	result += PyModule_AddIntMacro(module, SPI_PORT_EXTERNAL);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, SPI_TYPE_WIL);
	result += PyModule_AddIntMacro(module, SPI_TYPE_RAW);
	// end of enum -  };

	// enum
	result += PyModule_AddIntMacro(module, SPI_MODE_MASTER);
	result += PyModule_AddIntMacro(module, SPI_MODE_SLAVE);
	result += PyModule_AddIntMacro(module, SPI_MODE_PMS_EMULATION);
	// end of enum -  };

	result += PyModule_AddIntMacro(module, WBMS_GATEWAY_NETWORK_NONE);
	result += PyModule_AddIntMacro(module, WBMS_GATEWAY_NETWORK_DWCAN_01);
	result += PyModule_AddIntMacro(module, WBMS_GATEWAY_NETWORK_DWCAN_02);
	result += PyModule_AddIntMacro(module, WBMS_GATEWAY_NETWORK_UDP_MULTICAST);
	result += PyModule_AddIntMacro(module, SRADBMSSettings_SIZE);
	result += PyModule_AddIntMacro(module, SRADCometSettings_SIZE);
	result += PyModule_AddIntMacro(module, GS_VERSION);
	result += PyModule_AddIntMacro(module, GLOBAL_SETTINGS_SIZE);
	result += PyModule_AddIntMacro(module, NEOVI_3G_MAX_SETTINGS_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, DeviceFireSettingsType);
	result += PyModule_AddIntMacro(module, DeviceFireVnetSettingsType);
	result += PyModule_AddIntMacro(module, DeviceFire2SettingsType);
	result += PyModule_AddIntMacro(module, DeviceVCAN3SettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADGalaxySettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADStar2SettingsType);
	result += PyModule_AddIntMacro(module, DeviceVCAN4SettingsType);
	result += PyModule_AddIntMacro(module, DeviceVCAN412SettingsType);
	result += PyModule_AddIntMacro(module, DeviceVividCANSettingsType);
	result += PyModule_AddIntMacro(module, DeviceECU_AVBSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADSuperMoonSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADMoon2SettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADPlutoSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADGigalogSettingsType);
	result += PyModule_AddIntMacro(module, DeviceVCANRFSettingsType);
	result += PyModule_AddIntMacro(module, DeviceEEVBSettingsType);
	result += PyModule_AddIntMacro(module, DeviceVCAN4IndSettingsType);
	result += PyModule_AddIntMacro(module, DeviceNeoECU12SettingsType);
	result += PyModule_AddIntMacro(module, DeviceFlexVnetzSettingsType);
	result += PyModule_AddIntMacro(module, DeviceCANHUBSettingsType);
	result += PyModule_AddIntMacro(module, DeviceIEVBSettingsType);
	result += PyModule_AddIntMacro(module, DeviceOBD2SimSettingsType);
	result += PyModule_AddIntMacro(module, DeviceCMProbeSettingsType);
	result += PyModule_AddIntMacro(module, DeviceOBD2ProSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRedSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADPlutoSwitchSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADGigastarSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADJupiterSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRed2SettingsType);
	result += PyModule_AddIntMacro(module, DeviceRadMoonDuoSettingsType);
	result += PyModule_AddIntMacro(module, DeviceEtherBadgeSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADA2BSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADEpsilonSettingsType);
	result += PyModule_AddIntMacro(module, DeviceOBD2LCSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADBMSSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADMoon3SettingsType);
	result += PyModule_AddIntMacro(module, DeviceFire3SettingsType);
	result += PyModule_AddIntMacro(module, DeviceFire3FlexraySettingsType);
	result += PyModule_AddIntMacro(module, DeviceRADCometSettingsType);
	result += PyModule_AddIntMacro(module, DeviceRed2OemSettingsType);
	result += PyModule_AddIntMacro(module, DeviceSettingsTypeMax);
	result += PyModule_AddIntMacro(module, DeviceSettingsNone);
	// end of enum -  } EDeviceSettingsType;

	// enum
	result += PyModule_AddIntMacro(module, PlasmaIonVnetChannelMain);
	result += PyModule_AddIntMacro(module, PlasmaIonVnetChannelA);
	result += PyModule_AddIntMacro(module, PlasmaIonVnetChannelB);
	result += PyModule_AddIntMacro(module, eSoftCore);
	result += PyModule_AddIntMacro(module, eFpgaStatusResp);
	// end of enum -  } EPlasmaIonVnetChannel_t;

	// enum
	result += PyModule_AddIntMacro(module, eManagerPortA);
	result += PyModule_AddIntMacro(module, eManagerPortB);
	// end of enum -  } EwBMSManagerPort_t;

	// enum
	result += PyModule_AddIntMacro(module, eLockManager);
	result += PyModule_AddIntMacro(module, eUnlockManager);
	// end of enum -  } EwBMSManagerLockState_t;

	// enum
	result += PyModule_AddIntMacro(module, eUART0);
	result += PyModule_AddIntMacro(module, eUART1);
	// end of enum -  } EUartPort_t;

	// enum
	result += PyModule_AddIntMacro(module, eGENERIC_API);
	result += PyModule_AddIntMacro(module, eADI_WIL_API);
	// end of enum -  } eGenericAPIOptions;

	// enum
	result += PyModule_AddIntMacro(module, ewBMSInstance0);
	result += PyModule_AddIntMacro(module, ewBMSInstance1);
	// end of enum -  } EwBMSInstance_t;

	result += PyModule_AddIntMacro(module, stCM_ISO157652_TxMessage_SIZE);
	result += PyModule_AddIntMacro(module, ISO15765_2015_TxMessage_SIZE);
	result += PyModule_AddIntMacro(module, stCM_ISO157652_RxMessage_SIZE);
	result += PyModule_AddIntMacro(module, spyFilterLong_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessage_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessage_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessage_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessage_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessageLong_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessageJ1850_SIZE);
	result += PyModule_AddIntMacro(module, icsSpyMessageVSB_SIZE);
	result += PyModule_AddIntMacro(module, MAX_PHY_REG_PKT_ENTRIES);
	result += PyModule_AddIntMacro(module, PHY_REG_PKT_VERSION);
	result += PyModule_AddIntMacro(module, MAX_PHY_SETTINGS_STRUCT);
	result += PyModule_AddIntMacro(module, MAX_NUMBYTES_PHYSETTINGS);
	// enum
	result += PyModule_AddIntMacro(module, PHYREG_SUCCESS);
	result += PyModule_AddIntMacro(module, PHYREG_FAILURE);
	result += PyModule_AddIntMacro(module, PHYREG_INVALID_MDIO_BUS_INDEX);
	result += PyModule_AddIntMacro(module, PHYREG_INVALID_PHY_ADDR);
	result += PyModule_AddIntMacro(module, PHYREG_UNSUPPORTED_MDIO_CLAUSE);
	result += PyModule_AddIntMacro(module, PHYREG_RESERVED1);
	result += PyModule_AddIntMacro(module, PHYREG_RESERVED2);
	result += PyModule_AddIntMacro(module, PHYREG_RESERVED3);
	// end of enum -  } PhyRegPktStatus_t;

	// enum
	result += PyModule_AddIntMacro(module, PHYREG_READ);
	result += PyModule_AddIntMacro(module, PHYREG_WRITE);
	result += PyModule_AddIntMacro(module, PHYREG_BOTH);
	// end of enum -  } PhyRegPktRw_t;

	// enum
	result += PyModule_AddIntMacro(module, networkDWCAN01);
	result += PyModule_AddIntMacro(module, networkDWCAN02);
	result += PyModule_AddIntMacro(module, networkDWCAN03);
	result += PyModule_AddIntMacro(module, networkDWCAN04);
	result += PyModule_AddIntMacro(module, networkDWCAN05);
	result += PyModule_AddIntMacro(module, networkDWCAN06);
	result += PyModule_AddIntMacro(module, networkDWCAN07);
	result += PyModule_AddIntMacro(module, networkDWCAN08);
	result += PyModule_AddIntMacro(module, networkTerminationDWCAN01);
	result += PyModule_AddIntMacro(module, networkTerminationDWCAN02);
	result += PyModule_AddIntMacro(module, networkTerminationDWCAN03);
	result += PyModule_AddIntMacro(module, networkTerminationDWCAN04);
	result += PyModule_AddIntMacro(module, networkTerminationDWCAN05);
	result += PyModule_AddIntMacro(module, networkTerminationDWCAN06);
	result += PyModule_AddIntMacro(module, networkTerminationDWCAN07);
	result += PyModule_AddIntMacro(module, networkTerminationDWCAN08);
	result += PyModule_AddIntMacro(module, enhancedFlashDriver);
	result += PyModule_AddIntMacro(module, NUM_VALID_DEVICE_FEATURES);
	result += PyModule_AddIntMacro(module, supportedFeatureMax);
	// end of enum -  } DeviceFeature;

	// enum
	result += PyModule_AddIntMacro(module, AccessoryOperationError);
	result += PyModule_AddIntMacro(module, AccessoryOperationSuccess);
	result += PyModule_AddIntMacro(module, AccessoryFlashingInitError);
	result += PyModule_AddIntMacro(module, AccessoryFlashingEraseError);
	result += PyModule_AddIntMacro(module, AccessoryFlashingWriteError);
	result += PyModule_AddIntMacro(module, AccessoryFlashingReadError);
	result += PyModule_AddIntMacro(module, AccessoryFlashingVerifyError);
	result += PyModule_AddIntMacro(module, AccessoryFlashingDeinitError);
	result += PyModule_AddIntMacro(module, AccessoryFlashingInvalidHardware);
	result += PyModule_AddIntMacro(module, AccessoryFlashingInvalidDataFile);
	result += PyModule_AddIntMacro(module, AccessoryGetVersionError);
	result += PyModule_AddIntMacro(module, AccessoryIndexError);
	result += PyModule_AddIntMacro(module, AccessoryParamApiVersionError);
	result += PyModule_AddIntMacro(module, AccessoryParamSizeMismatchError);
	result += PyModule_AddIntMacro(module, AccessoryParameterNull);
	// end of enum -  } AccessoryOperationErrorType;

	result += PyModule_AddIntMacro(module, FlashAccessoryFirmwareParams_SIZE);
	result += PyModule_AddIntMacro(module, FlashAccessoryFirmwareParams_SIZE);
	// enum
	result += PyModule_AddIntMacro(module, FLASH_ACCESSORY_EPSILON_SWITCH_A);
	result += PyModule_AddIntMacro(module, FLASH_ACCESSORY_EPSILON_SWITCH_B);
	result += PyModule_AddIntMacro(module, FLASH_ACCESSORY_EPSILON_10G_PHY1);
	result += PyModule_AddIntMacro(module, FLASH_ACCESSORY_EPSILON_10G_PHY2);
	result += PyModule_AddIntMacro(module, FLASH_ACCESSORY_EPSILON_10G_PHY1_PHY2);
	// end of enum -  } flashAccessoryIndex;

	// enum
	result += PyModule_AddIntMacro(module, FLASH_ACCESSORY_EPSILON_10G_PHY_FW_0_3_7_0);
	// end of enum -  } epsilon10GPHYFW;

	result += PyModule_AddIntMacro(module, NUM_DEVICE_FEATURE_BITFIELDS);
	// enum
	// end of enum -    }


	return result == 0 ? 1 : 0;
}
